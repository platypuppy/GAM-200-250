#include <iostream>
#include "rapidjson/document.h"
#include "rapidjson/istreamwrapper.h"
#include <string>
#include <fstream>
#include "rapidjson/error/en.h"
#include "rapidjson/error/error.h"

static const char* kTypeNames[] = {
  "Null",
  "False",
  "True",
  "Object",
  "Array",
  "String",
  "Number"
};

static void JSONError(rapidjson::ParseResult ok) {
  if (!ok)
    std::cerr << "JSON parse error: "
              << rapidjson::GetParseError_En(ok.Code())
              << " ("
              << ok.Offset()
              << ")"
              << std::endl;  
}

static void printObject(rapidjson::Value& obj) {
  for (auto it = obj.MemberBegin(); it != obj.MemberEnd(); ++it) {
    std::cout << kTypeNames[it->value.GetType()] << std::endl;
    if (std::string("Object") == kTypeNames[it->value.GetType()])
      printObject(it->value);
    
  }
}
/*
static void printDoc(rapidjson::Document& doc) {
  for (auto& it : doc.GetObject())
    printObject(*it);
}
*/

int main (void) {
  //std::cout << "-------------" << std::endl;
  //std::cout << "yay code work" << std::endl;
  
  std::ifstream jsonFile("_in/test.json");
  rapidjson::IStreamWrapper jsonStream(jsonFile);
  
  rapidjson::Document document;
  JSONError(document.ParseStream(jsonStream));

  for (auto& m : document.GetObject()) {
    std::cout << "Type of "
              << m.name.GetString()
              << " is "
              << kTypeNames[m.value.GetType()]
              << std::endl;
    if (std::string("Object") == kTypeNames[m.value.GetType()])
      printObject(m.value);
      //std::cout << "yay an object" << std::endl;
      
  }
  
  //printDoc(document);

  //std::cout << "-------------" << std::endl;
}
